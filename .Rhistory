prin <- princomp(dat[-1], cor = TRUE)
## results visualized
par(mfrow = c(1, 2))
screeplot(prin, type = "l")
loadings(prin)
dat_pca <- as.data.frame(prin$scores)
dat_pca$y <- y
plot(y ~ Comp.3, data = dat_pca)
## linear model detects good_x rightfully as only good significant
## predictor
mod <- lm(y ~ ., dat)
summary(mod)
?lm
#Solution to the project of Getting and Cleaning data subject
setwd("/Users/jguerra/Coursera-rep/Coursera-GCLD/")
start.time <- Sys.time()
#Train data
X_train_data <- read.table("./UCI HAR Dataset//train//X_train.txt")
Y_train_data <- read.table("./UCI HAR Dataset//train//y_train.txt")
Subject_train_data <- read.table("./UCI HAR Dataset/train/subject_train.txt")
Body_acc_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_x_train.txt")
Body_acc_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_y_train.txt")
Body_acc_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_z_train.txt")
Body_gyr_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_x_train.txt")
Body_gyr_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_y_train.txt")
Body_gyr_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_z_train.txt")
Total_acc_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_x_train.txt")
Total_acc_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_y_train.txt")
Total_acc_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_z_train.txt")
#Test data
X_test_data <- read.table("./UCI HAR Dataset//test//X_test.txt")
Y_test_data <- read.table("./UCI HAR Dataset//test//y_test.txt")
Subject_test_data <- read.table("./UCI HAR Dataset/test/subject_test.txt")
Body_acc_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_x_test.txt")
Body_acc_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_y_test.txt")
Body_acc_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_z_test.txt")
Body_gyr_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_x_test.txt")
Body_gyr_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_y_test.txt")
Body_gyr_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_z_test.txt")
Total_acc_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_x_test.txt")
Total_acc_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_y_test.txt")
Total_acc_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_z_test.txt")
tictoc <-  Sys.time() - start.time
tictoc
head(Body_acc_X_test_data)
dfList = list (Y_train_data, Subject_train_data, X_train_data)
train_join_data <- join_all(dfList)
library(plyr)
train_join_data <- join_all(dfList)
?rbind
d <- cbind(Y_train_data, Subject_train_data)
d
train_data <- cbind(Y_train_data, Subject_train_data, X_train_data)
## Put all train data together
train_data <- cbind(Y_train_data, Subject_train_data, X_train_data)
## Put all test data together
test_data <- cbind(Y_test_data, Subject_test_data, X_test_data)
##
all_data <- rbind (train_data, test_data)
features_name <- read.table("./UCI HAR Dataset//features.txt")
features_name
features_name[,2]
grepl(features_name[,2] , "mean()")
?grepl
grepl(features_name[1,2] , "mean()")
grepl(features_name[542,2] , "mean()")
grepl("aaaamean()ddddd" , "mean()")
grep("aaaamean()ddddd" , "mean()")
grep( "mean()", "aaaamean()ddddd")
grepl( "mean()", "aaaamean()ddddd")
grepl( "mean()", "aaaaean()ddddd")
grepl( "mean()", features_name[,2])
str(grepl( "mean()", features_name[,2]) )
summary(grepl( "mean()", features_name[,2]) )
summary(grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2]) )
grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2])
features_selected <- features_name[grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2]),1]
features_selected
features_selected_name <- features_name[grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2]),2]
features_selected_name
features_selected <- features_name[grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2]),1]
selection <- grepl( "mean()", features_name[,2]) | grepl( "std()", features_name[,2])
features_selected <- features_name[selection,]
features_selected
names(all_data)
all_selected_data <- all_data[,2 + features_[selected,1]]
all_selected_data <- all_data[,2 + features_selected[,1]]
c(1,2, 2 +features_selected[,1])
all_selected_data <- all_data[,c(1,2, 2 +features_selected[,1])]
all_selected_data[1,]
all_selected_data[,1]
split(all_selected_data$V1)
split(all_selected_data)
?split
split(all_selected_data, all_selected_data$V1)
?dataframe
?unclass
?levels
levels(Y_train_data)
levels(all_selected_data)
levels(all_selected_data[1,])
levels(all_selected_data[,1])
summary(all_selected_data[,1])
levels(all_selected_data[,1])
level(all_selected_data[,1])
levels(all_selected_data[,1])
all_selected_data[,1] == 1
all_selected_data[all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
summary(all_selected_data[,1])
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 2),1] <- "WALKING_UPSTAIRS"
all_selected_data[(all_selected_data[,1] == 3),1] <- "WALKING_DOWNSTAIRS"
all_selected_data[(all_selected_data[,1] == 4),1] <- "SITTING"
all_selected_data[(all_selected_data[,1] == 5),1] <- "STANDING"
all_selected_data[(all_selected_data[,1] == 6),1] <- "LAYING"
head(all_selected_data)
head(all_selected_data[,1])
tail(all_selected_data[,1])
split(all_selected_data, all_selected_data$V1)
?col
?colname
?col.name
?names
colnames(all_selected_data)
colnames(all_selected_data) <- c("Activity", "Subject", features_selected[,2])
colnames
colnames(all_selected_data)
colnames(all_selected_data) <- c("Activity", "Subject", features_selected[,1])
colnames(all_selected_data)
features_selected
colnames(all_selected_data) <- c("Activity", "Subject", features_selected[,2])
colnames(all_selected_data)
colnames(all_selected_data) <- c("Activity", "Subject", toString(features_selected[,2])
)
colnames(all_selected_data)
colnames(all_selected_data) <- c("Activity", "Subject", toString(features_selected[,2])
)
(features_selected[,2])
colnames(all_selected_data) <- c("Activity", "Subject", features_selected[,2])
colnames(all_selected_data)
features_selected
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
features_data <- read.table("./UCI HAR Dataset//features.txt")
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
all_selected_data <- all_data[,c(1,2, 2 +features_selected[,1])]
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 2),1] <- "WALKING_UPSTAIRS"
all_selected_data[(all_selected_data[,1] == 3),1] <- "WALKING_DOWNSTAIRS"
all_selected_data[(all_selected_data[,1] == 4),1] <- "SITTING"
all_selected_data[(all_selected_data[,1] == 5),1] <- "STANDING"
all_selected_data[(all_selected_data[,1] == 6),1] <- "LAYING"
features_selected
colnames(all_selected_data) <- c("Activity", "Subject", features_selected[,2])
colnames(all_selected_data)
c("Activity", "Subject", features_selected[,2])
c(features_selected[,2])
features_selected[,2]
c("Activity", "Subject")
cbind(c("Activity", "Subject"), features_selected[,2])
rbind(c("Activity", "Subject"), features_selected[,2])
rbind(c("Activity", "Subject"), features_selected[,2])
?C
?c
c("Activity", "Subject", features_selected[1,2])
features_selected[1,2]
toString(features_selected[1,2])
c("Activity", "Subject", toString(features_selected[1,2]))
c("Activity", "Subject", toString(features_selected[,2]))
c("Activity", "Subject", toString(features_selected[,2]))
?toString
c("Activity", "Subject", as.character(features_selected[,2]))
colnames(all_selected_data) <- c("Activity", "Subject", as.character(features_selected[,2]))
colnames(all_selected_data)
colnames(all_selected_data) <- c("Activity", "Subject", as.character(features_selected[,2]))
mean(all_selected_data)
mean(all_selected_data[,2:end])
mean(all_selected_data[,2:])
length(all_selected_data)
?tail
mean(all_selected_data[,2:length(all_selected_data)])
mean(all_selected_data[,3:length(all_selected_data)])
mean(as.numeric(all_selected_data[,3:length(all_selected_data))])
mean(as.numeric(all_selected_data[,3:length(all_selected_data)])
)
str(all_selected_data)
## Put all train data together
train_data <- cbind(Y_train_data, Subject_train_data, X_train_data)
## Put all test data together
test_data <- cbind(Y_test_data, Subject_test_data, X_test_data)
## Put train and test data together
all_data <- rbind (train_data, test_data)
## Select features of mean or std
features_data <- read.table("./UCI HAR Dataset//features.txt")
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
##Extract only the selected features data
all_selected_data <- all_data[,c(1,2, 2 +features_selected[,1])]
## Translate code of activities by their name
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 2),1] <- "WALKING_UPSTAIRS"
all_selected_data[(all_selected_data[,1] == 3),1] <- "WALKING_DOWNSTAIRS"
all_selected_data[(all_selected_data[,1] == 4),1] <- "SITTING"
all_selected_data[(all_selected_data[,1] == 5),1] <- "STANDING"
all_selected_data[(all_selected_data[,1] == 6),1] <- "LAYING"
# Appropriately labels the data set with descriptive variable names.
# Using the names included in features.txt
colnames(all_selected_data) <- c("Activity", "Subject", as.character(features_selected[,2]))
str(all_selected_data)
mean(all_selected_data)
mean(all_selected_data[, 25])
mean(all_selected_data[, 3])
mean(all_selected_data[, 2])
mean(all_selected_data[, 1])
mean(all_selected_data[, 1])
lapply(all_selected_data[, 2:length(all_selected_data)], mean)
means <- lapply(all_selected_data[, 2:length(all_selected_data)], mean)
means
table(means)
table(means)
means <- mean(all_selected_data[, 3:length(all_selected_data)])
means <- lapply(all_selected_data[, 3:length(all_selected_data)], mean)
c(2, means)
split(all_selected_data, all_selected_data$Activity & all_selected_data$Subject)
?split
sss <- split(all_selected_data, all_selected_data$Activity)
mean (sss[,2])
table(all_selected_data$Activity, all_selected_data$Subject)
table_activity_subject <- table(all_selected_data$Activity, all_selected_data$Subject)
table[1,1]
table_activity_subject[1,1]
rbind(table_activity_subject[,1], table_activity_subject[,1])
rbind(table_activity_subject[,1], table_activity_subject[,2])
all_selected_data[,1]
levels(all_selected_data[,1])
?levels
?factor
str(all_selected_data[,1])
summary(all_selected_data[,1])
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
head(mtcars)
carMelt <- melt (mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt, n=3)
?melt
?dcast
## Put all train data together
train_data <- cbind(Y_train_data, Subject_train_data, X_train_data)
## Put all test data together
test_data <- cbind(Y_test_data, Subject_test_data, X_test_data)
## Put train and test data together
all_data <- rbind (train_data, test_data)
## Select features of mean or std
features_data <- read.table("./UCI HAR Dataset//features.txt")
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
##Extract only the selected features data
all_selected_data <- all_data[,c(1,2, 2 +features_selected[,1])]
## Translate code of activities by their name
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 2),1] <- "WALKING_UPSTAIRS"
all_selected_data[(all_selected_data[,1] == 3),1] <- "WALKING_DOWNSTAIRS"
all_selected_data[(all_selected_data[,1] == 4),1] <- "SITTING"
all_selected_data[(all_selected_data[,1] == 5),1] <- "STANDING"
all_selected_data[(all_selected_data[,1] == 6),1] <- "LAYING"
# Appropriately labels the data set with descriptive variable names.
# Using the names included in features.txt
colnames(all_selected_data) <- c("Activity", "Subject", as.character(features_selected[,2]))
per_activity_data <- split(all_selected_data, all_selected_data$Activity)
mean(per_activity_data)
summary(per_activity_data)
summary(per_activity_data$WALKING)
summary(per_activity_data$WALKING$Subject)
split(per_activity_data$WALKING$Subject)
split(per_activity_data$WALKING$Subject
)
levels(Y_train_data
)
ccc <- dcast(all_selected_data, Activity ~ variable)
ccc <- dcast(all_selected_data, "Activity" ~ variable)
ccc <- dcast(all_selected_data, Subject ~ variable)
ccc <- dcast(all_selected_data, "Subject" ~ variable)
?dcast
ccc <- dcast(all_selected_data, "Subject" ~ variable , mean)
ccc <- dcast(all_selected_data, Subject ~ variable , mean)
factor(all_selected_data$Activity)
levels(factor(all_selected_data$Activity))
levels(factor(all_selected_data$Subject))
rbind(levels(factor(all_selected_data$Activity)), levels(factor(all_selected_data$Subject)))
lbind(levels(factor(all_selected_data$Activity)), levels(factor(all_selected_data$Subject)))
cbind(levels(factor(all_selected_data$Activity)), levels(factor(all_selected_data$Subject)))
?combine
?gle
?gl
activity_levels <- levels(factor(all_selected_data$Activity))
subject_levels <- levels(factor(all_selected_data$Subject))
interaction(activity_levels, subject_levels)
split(all_selected_data, list(activity_levels, subject_levels))
lapply(split(all_selected_data, list(activity_levels, subject_levels), mean)
)
lapply(split(all_selected_data, list(activity_levels, subject_levels)), mean)
splitted_data <- (split(all_selected_data, list(activity_levels, subject_levels))
)
splitted_data <- split(all_selected_data, list(activity_levels, subject_levels))
split(all_selected_data, list(activity_levels, subject_levels))
split_data <- split(all_selected_data, list(activity_levels, subject_levels))
split_data
summary(split_data)
split_data$LAYING.1
mean(split_data$LAYING.1)
head(split_data$LAYING.1)
mean(split_data$LAYING.1[,2])
mean(split_data$LAYING.1[,1])
mean(split_data$LAYING.1[,3])
mean(split_data$LAYING.1[,2:length(split_data$LAYING.1)])
split_data$LAYING.1
length(split_data$LAYING.1)
mean(split_data$LAYING.1[,2:])
dim(split_data$LAYING.1)
mean(split_data$LAYING.1[,2:length(split_data$LAYING.1)])
mean(split_data$LAYING.1[,2:10])
mean(split_data$LAYING.1)
mean(split_data$LAYING.1[,2:length(split_data$LAYING.1)])
melt(all_selected_data, id = c("Activity", "Subject"))
melted -> melt(all_selected_data, id = c("Activity", "Subject"))
melted <- melt(all_selected_data, id = c("Activity", "Subject"))
clean <- dcast(melted, Activity + Subject ~ variable, mean)
clean
head (clean)
tail (clean)
summary(clean)
clean[,1:5]
clean <- dcast(melted, Activity + Subject ~ variable, mean)
melted_data <- melt(all_selected_data, id = c("Activity", "Subject"))
clean_data <- dcast(melted, Activity + Subject ~ variable, mean)
clean_data
#Solution to the project of Getting and Cleaning data subject
setwd("/Users/jguerra/Coursera-rep/Coursera-GCLD/")
start.time <- Sys.time()
#Train data
X_train_data <- read.table("./UCI HAR Dataset//train//X_train.txt")
Y_train_data <- read.table("./UCI HAR Dataset//train//y_train.txt")
Subject_train_data <- read.table("./UCI HAR Dataset/train/subject_train.txt")
Body_acc_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_x_train.txt")
Body_acc_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_y_train.txt")
Body_acc_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_acc_z_train.txt")
Body_gyr_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_x_train.txt")
Body_gyr_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_y_train.txt")
Body_gyr_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//body_gyro_z_train.txt")
Total_acc_X_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_x_train.txt")
Total_acc_Y_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_y_train.txt")
Total_acc_Z_train_data <- read.table("./UCI HAR Dataset/train/Inertial Signals//total_acc_z_train.txt")
#Test data
X_test_data <- read.table("./UCI HAR Dataset//test//X_test.txt")
Y_test_data <- read.table("./UCI HAR Dataset//test//y_test.txt")
Subject_test_data <- read.table("./UCI HAR Dataset/test/subject_test.txt")
Body_acc_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_x_test.txt")
Body_acc_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_y_test.txt")
Body_acc_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_acc_z_test.txt")
Body_gyr_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_x_test.txt")
Body_gyr_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_y_test.txt")
Body_gyr_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//body_gyro_z_test.txt")
Total_acc_X_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_x_test.txt")
Total_acc_Y_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_y_test.txt")
Total_acc_Z_test_data <- read.table("./UCI HAR Dataset/test/Inertial Signals//total_acc_z_test.txt")
tictoc <-  Sys.time() - start.time
## Put all train data together
train_data <- cbind(Y_train_data, Subject_train_data, X_train_data)
## Put all test data together
test_data <- cbind(Y_test_data, Subject_test_data, X_test_data)
## Put train and test data together
all_data <- rbind (train_data, test_data)
## Select features of mean or std
features_data <- read.table("./UCI HAR Dataset//features.txt")
features_selected <- features_data[grepl( "mean()", features_data[,2]) | grepl( "std()", features_data[,2]),]
##Extract only the selected features data
all_selected_data <- all_data[,c(1,2, 2 +features_selected[,1])]
## Translate code of activities by their name
all_selected_data[(all_selected_data[,1] == 1),1] <- "WALKING"
all_selected_data[(all_selected_data[,1] == 2),1] <- "WALKING_UPSTAIRS"
all_selected_data[(all_selected_data[,1] == 3),1] <- "WALKING_DOWNSTAIRS"
all_selected_data[(all_selected_data[,1] == 4),1] <- "SITTING"
all_selected_data[(all_selected_data[,1] == 5),1] <- "STANDING"
all_selected_data[(all_selected_data[,1] == 6),1] <- "LAYING"
# Appropriately labels the data set with descriptive variable names.
# Using the names included in features.txt
colnames(all_selected_data) <- c("Activity", "Subject", as.character(features_selected[,2]))
# Creates a second, independent tidy data set with the average of each variable
# for each activity and each subject.
melted_data <- melt(all_selected_data, id = c("Activity", "Subject"))
clean_data <- dcast(melted_data, Activity + Subject ~ variable, mean)
clean_data <- dcast(melted_data, Activity + Subject ~ variable, mean max)
?dcast
clean_data <- dcast(melted_data, Activity + Subject ~ time, mean)
clean_data <- dcast(melted_data, Activity + Subject ~ variable, mean)
clean_data
?write.table
write.table(clean_data, file = ".\clean_data.txt", row.names = FALSE)
write.table(clean_data, file = "./clean_data.txt", row.names = FALSE)
?knitr
melted_data
head(melted_data)
melted_data2 <- melt(all_selected_data, id = c("Activity", "Subject"), varnames = tBodyAcc-mean()-X)
?melt
melted_data2 <- melt(all_selected_data, id = c("Activity", "Subject"), measure.vars = c(tBodyAcc-mean()-X""))
melted_data2 <- melt(all_selected_data, id = c("Activity", "Subject"), measure.vars = c("tBodyAcc-mean()-X"))
head(melted_data2)
setwd("/Users/jguerra/Repositories//GCD-Project")
ls()
source("run_analysis.R")
source("run_analysis.R")
setwd("~/Coursera-rep/Coursera-GCLD")
source("run_analysis.R")
write.table(clean_data, file = "./clean_data.txt", row.names = FALSE)
head (clean_data)
names (clean_data)
clean_data$Activity
levels(clean_data$Activity)
levels(factor(clean_data$Activity))
names(clean_data)
features_selected
features_selected[,2]
cbind(3:81, features_selected[,2])
cbind(3:81, as.character(features_selected[,2]))
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "./housing_idaio.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "./housing_idaio.csv")
housing_data <- read.table("./housing_idaio.csv")
str (housing_data)
summary(housing_data)
head(housing_data)
housing_data <- read.csv("./housing_idaio.csv")
housing_data <- read.csv("./housing_idaio.csv")
head(housing_data)
?strsplit
names(housing_data)
splitNames = strsplit (names(housing_data), "\\.")
splitNames
splitNames = strsplit (names(housing_data), "wgtp")
splitNames
splitNames[123]
splitNames = strsplit (names(housing_data), "wgtp")
source("Quiz4.1.R")
spitNames[123]
splitNames[123]
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile = "./GDP_data.csv")
GDP_data <- read.csv("./GDP_data.csv")
head(GDP_data)
tail(GDP_data)
GDP_data.csv
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = ",",
quote = "", na.strings="NA", fill=TRUE, nrows=231)
tail(GDP_data)
head(GDP_data)
?GDP
?read.table
setAs("character", "num.with.commas",
function(from) as.numeric(gsub(",", "", from) ) )
?read
GDP_data -> read.csv("./GDP_data.csv")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile = "./GDP_data.csv")
GDP_data -> read.csv("./GDP_data.csv")
GDP_data <- read.csv("./GDP_data.csv")
?read.csv
GDP_data <- read.csv("./GDP_data.csv", colClasses = "character")
GDP_data
head(GDP_data)
GDP_data <- read.csv("./GDP_data.csv", colClasses = "character")
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = ",",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
head(GDP_data)
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "/n",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "//n",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
head(GDP_data)
head(GDP_data[,1])
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = ",",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
head(GDP_data)
head(GDP_data[,6])
head(GDP_data[,5])
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "",
quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
head(GDP_data)
head(GDP_data[,3])
head(GDP_data[,2])
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "\"",
+                         quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = "\"",
+                         quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
GDP_data <- read.table( "./GDP_data.csv",    skip=5, , sep = """,
+                         quote = "", na.strings="NA", fill=TRUE, nrows=231, colClasses = "character")
lines <- readLines("./GDP_data.csv")
lines
lines[1]
lines[2]
lines[3]
lines[23]
gsub(",", "", lines)
gsub("[0,9]+,+[0,9]", "[0,9]+,+[0,9]", lines)
gsub("[0-9]+,+[0-9]", "[0-9]+,+[0-9]", lines)
?gsub
gsub("[0-9]+,+[0-9]", "\1\2", lines)
gsub("[0-9]+,+[0-9]", "\1\3", lines)
gsub("[0-9],[0-9]", "\1\3", lines)
gsub("[0-9],[0-9]", "", lines)
gsub("[0-9],[0-9]", "\\1\\2", lines)
gsub("[0-9],[0-9]", "\1\2", lines)
gsub("[0-9],[0-9]", "[0-9][0-9]", lines)
