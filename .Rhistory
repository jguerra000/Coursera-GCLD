?lapply
?rnorm
x<- list (a=1:5, b= rnorm(10))
x
lapply(x,mean)
x<- list (a=1:100, b= rnorm(10))
lapply(x,mean)
?runif
runif(4)
runif(4)
runif(4)
runif(4, min=0, max=10)
x<- 1:10
lapply (x, runif, min=0, max=10)
str (apply)
?rowmeans
?rowMeans
str (tapply)
?tapply
?gl
library(datasets)
data(iris)
?iris
iris
apply(iris,mean)
apply(iris,1, mean)
apply(iris,1, mean)
?mean
apply(iris,1, mean, na.rm = TRUE)
lapply(iris, mean)
lapply(iris, mean, na.rm = TRUE)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris[1:4,], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
debug(ls)
ls
ls()
close
close()+
a
quit
quit()
debug()
"."
?debug
clear()
exit()
license
license()
library("MASS")
set.seed(123456)
### building a toy data set ###
## number of observations
n <- 500
## good predictor
good_x <- rnorm(n = n, mean = 0.5, sd = 1)
## noisy variable, which is highly correlated with good predictor
noisy_x <- good_x + rnorm(n, mean = 0, sd = 1.2)
## response variable linear to good_x plus random error
y <- 0.7 * good_x + rnorm(n, mean = 0, sd = 0.11)
## variables with no relation to response 10 variables, 5 are always
## correlated
Sigma_diag <- matrix(0.6, nrow = 5, ncol = 5)
zeros <- matrix(0, nrow = 5, ncol = 5)
Sigma <- rbind(cbind(Sigma_diag, zeros), cbind(zeros, Sigma_diag))
diag(Sigma) <- 1
random_X <- mvrnorm(n = n, mu = rep(0, 10), Sigma = Sigma)
colnames(random_X) <- paste("useless", 1:10, sep = "_")
## binding all together
dat <- data.frame(y = y, good_x, noisy_x, random_X)
## relationship between y and good_x and noisy_x
par(mfrow = c(1, 2))
plot(y ~ good_x, data = dat)
plot(y ~ noisy_x, data = dat)
Sigma
?par
## pca
prin <- princomp(dat[-1], cor = TRUE)
## results visualized
par(mfrow = c(1, 2))
screeplot(prin, type = "l")
loadings(prin)
dat_pca <- as.data.frame(prin$scores)
dat_pca$y <- y
plot(y ~ Comp.3, data = dat_pca)
## linear model detects good_x rightfully as only good significant
## predictor
mod <- lm(y ~ ., dat)
summary(mod)
?lm
setwd("~/Coursera-rep/Coursera-GCLD")
con2 = url ("http://www.marca.com",  open="r")
htmlCode = readLines(con2)
close(con)
htmlCode
htlmCode
htmlCode[1]
htmlCode[2]
nchar(htmlCode[10])
close(con2)
?read
read.fortran
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
read.fortran(url)
read.fortran(url, format = F7.4)
read.fortran(url, format = "F7.4")
read.fortran("./data//getdata-wksst8110.for", format = "F7.4")
?read.fwf
read.fortran("./data//getdata-wksst8110.for", format = "F7.4")
read.fwf("./data//getdata-wksst8110.for")
read.fwf("./data//getdata-wksst8110.for", widths = 20)
read.fwf("./data//getdata-wksst8110.for", widths = 200)
data <- read.fwf("./data//getdata-wksst8110.for", widths = 200)
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = 200, sep = "\t")
data <- read.fwf("./data//getdata-wksst8110.for", widths = 200, sep = "\n")
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = 2000, sep = "\n")
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = 2000, sep = "\n")
data <- read.fwf("./data//getdata-wksst8110.for", widths = 4, sep = "\n")
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = 5, sep = "\n")
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = 5, sep = "\t")
data <- read.fwf("./data//getdata-wksst8110.for", widths = 1000, sep = "\t")
data
data[, 3]
head (data)
data [5,1:10]
data[3,1:10]
data[3,]
data[5,]
data[15,]
data[15,1]
data[15,1][1:3]
data[15,1][1:3]
data
read.fwf("./data//getdata-wksst8110.for", widths = c(10, 5))
read.fwf("./data//getdata-wksst8110.for", widths = c(10, 5, 10))
read.fwf("./data//getdata-wksst8110.for", widths = c(30, 10))
read.fwf("./data//getdata-wksst8110.for", widths = c(37))
read.fwf("./data//getdata-wksst8110.for", widths = c(37, 3))
read.fwf("./data//getdata-wksst8110.for", widths = c(37, 3), sep = "\n")
read.fwf("./data//getdata-wksst8110.for", widths = c(34, 3), sep = "\n")
read.fwf("./data//getdata-wksst8110.for", widths = c(33, 3), sep = "\n")
data <- read.fwf("./data//getdata-wksst8110.for", widths = c(33, 3), sep = "\n")
data
data[2:2:end]
data[2:2:end,]
2:2:100
data [c(2:2:2516)]
data [c(2:2:2516)]
data [2:2:2516]
data
data[]2
data[2]
data(2)
data(2)
data
head(data)
data[1]
data[1][2]
data[[1]]
data[[2:2:100]]
data[[1]][2]
data[[1]][6]
data[[1]][7]
data[[1]][8]
head (data[[1]])
d <- dat[[1]]
d <- data[[1]]
d
d[1]
d[2494]
data <- read.fwf("./data//getdata-wksst8110.for", widths = c(33, 3, 60), sep = "\n")
data
data <- read.fwf("./data//getdata-wksst8110.for", widths = c(33, 3, 600), sep = "\n")
data
d <- data[[1]]
d
data <- read.fwf("./data//getdata-wksst8110.for", widths = c(33, 3, 80), sep = "\n")
data
d <- data[[1]]
d
data[1]
data[[1]]
