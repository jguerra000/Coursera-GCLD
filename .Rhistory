exit()
license
license()
library("MASS")
set.seed(123456)
### building a toy data set ###
## number of observations
n <- 500
## good predictor
good_x <- rnorm(n = n, mean = 0.5, sd = 1)
## noisy variable, which is highly correlated with good predictor
noisy_x <- good_x + rnorm(n, mean = 0, sd = 1.2)
## response variable linear to good_x plus random error
y <- 0.7 * good_x + rnorm(n, mean = 0, sd = 0.11)
## variables with no relation to response 10 variables, 5 are always
## correlated
Sigma_diag <- matrix(0.6, nrow = 5, ncol = 5)
zeros <- matrix(0, nrow = 5, ncol = 5)
Sigma <- rbind(cbind(Sigma_diag, zeros), cbind(zeros, Sigma_diag))
diag(Sigma) <- 1
random_X <- mvrnorm(n = n, mu = rep(0, 10), Sigma = Sigma)
colnames(random_X) <- paste("useless", 1:10, sep = "_")
## binding all together
dat <- data.frame(y = y, good_x, noisy_x, random_X)
## relationship between y and good_x and noisy_x
par(mfrow = c(1, 2))
plot(y ~ good_x, data = dat)
plot(y ~ noisy_x, data = dat)
Sigma
?par
## pca
prin <- princomp(dat[-1], cor = TRUE)
## results visualized
par(mfrow = c(1, 2))
screeplot(prin, type = "l")
loadings(prin)
dat_pca <- as.data.frame(prin$scores)
dat_pca$y <- y
plot(y ~ Comp.3, data = dat_pca)
## linear model detects good_x rightfully as only good significant
## predictor
mod <- lm(y ~ ., dat)
summary(mod)
?lm
?download
?download.file()
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
download.file(d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file (https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
setwd("~/datasciencecoursera")
mkdir ("GetAndCleanDataCourse")
setwd("~/Coursera-rep/Coursera-GCLD")
setwd("~/Coursera-rep/Coursera-GCLD")
?csvread
read.csv("getdata-data-ss06hid.csv")
data <- read.csv("getdata-data-ss06hid.csv")
head (data)
head (data[,val])
head (data[,"val"])
head (data[,"VAL"])
(data[,"VAL"]) > 10000
data[(data[,"VAL"]) > 10000), "VAL"]
data[((data[,"VAL"]) > 10000), "VAL"]
(data[,"VAL"]) > 10000
(data[,"VAL"]) > 10000 == TRUE
data[((data[,"VAL"]) > 10000), "VAL"]
(data["VAL",]) > 10000
(data[,"VAL"]) > 10000
data [ (data[,"VAL"]) > 10000 , "VAL"]
data [ (data[,"VAL"]) > 10000 ,]
head ( data [ (data[,"VAL"]) > 10000 ,] )
head (data)
head ( data [ (data[,"VAL"]) > 10000 , "VAL"] )
data [TRUE, "VAL"]
head ( !is.na(data [ (data[,"VAL"]) > 10000 , "VAL"])
)
values <- !is.na (data [ (data[,"VAL"]) > 10000 , "VAL"])
values
values <- (data [ (data[,"VAL"]) > 10000 , "VAL"])
values
values <- data [ (data[,"VAL"]) > 10000 , "VAL"]
values <- data [ (data[,"VAL"]) > 10000 , ]
values
values <- data [ (data[,"VAL"]) > 1 , ]
head (values)
head (values[,"VAL"])
head (data[,"VAL"])
values <- data [ !is.na(data[,"VAL"]) > 1 , ]
is.na(values[,"VAL"])
summary(is.na(values[,"VAL"]))
complete.cases(values[,"VAL"])
data
data [,"VAL"]
data [,"VAL"] >10
data [data [,"VAL"] >10 , ]
my_val_data <- data [data [,"VAL"] >10 , ]
my_val_data <- data [data [,"VAL"] >10 , "VAL"]
my_val_data <- complete.cases (my_val_data)
my_val_data <- data [data [,"VAL"] >10 , "VAL"]
my_val_data <- my_val_data (complete.cases (my_val_data))
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
my_val_data <- data [data [,"VAL"] >10 , "VAL"]
length(my_val_data)
clear
?clear
## Quiz 1.
data <- read.csv("getdata-data-ss06hid.csv")
my_val_data <- data [data [,"VAL"] >10 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
## Quiz 1.
data <- read.csv("getdata-data-ss06hid.csv")
my_val_data <- data [data [,"VAL"] >14 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
my_val_data <- data [data [,"VAL"] >13 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
data <- data [complete.cases (data),]
my_val_data <- data [data [,"VAL"] >13 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
data <- data [complete.cases (data),]
my_val_data <- data [data [,"VAL"] >13 , "VAL"]
data <- read.csv("getdata-data-ss06hid.csv")
my_val_data <- data [data [,"VAL"] >13 , "VAL"]
summary (my_val_data)
my_val_data <- data [data [,"VAL"] >13 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
data <- read.csv("getdata-data-ss06hid.csv")
my_val_data <- data [data [,"VAL"] ==24 , "VAL"]
my_val_data <- my_val_data [complete.cases (my_val_data)]
summary (my_val_data)
length (my_val_data)
data[,"FES"]
Each variable in a tidy data set has been transformed to be interpretable.
fileUrl <-https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data/cameras.xlsx", method = "curl")
download.file (fileUrl, destfile = "./data/cameras.xlsx", method = "curl")
getwd()
cameraData <- read.xlsx("./data//cameras.xlsx")
library (xlsx)
library (xlsx)
library ("xlsx)
""
)
")"
library ("xlsx")
library ("xlsx")
install.packages("xlsx")
library ("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data/naturalGas.xlsx", method = "curl")
gasData <- read.xlsx("./data//naturalGas.xlsx")
gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
header (gasData)
head(gasData)
dat <- gasData [18:23, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE, colIndex = colIndex, rowIndex = rowIndex)
colIndex <-18:23
rowIndex <- 7:15
dat <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE, colIndex = colIndex, rowIndex = rowIndex)
colIndex <-18:23
rowIndex <- 7:15
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1, header = TRUE, colIndex = colIndex, rowIndex = rowIndex)
##Q3
library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data/naturalGas.xlsx", method = "curl")
gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
colIndex <-18:23
rowIndex <- 7:15
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1, header = TRUE, colIndex = colIndex, rowIndex = rowIndex)
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1, colIndex = colIndex, rowIndex = rowIndex)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data/naturalGas.xlsx", method = "curl")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
colIndex <- 18:23
rowIndex <- 7:15
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1,
colIndex = colIndex, rowIndex = rowIndex)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data/naturalGas.xlsx", method = "curl")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
colIndex <- 18:23
rowIndex <- 7:15
dat <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1,
colIndex = colIndex, rowIndex = rowIndex)
read.xslx("./data/naturalGas.xlsx")
library(xslx)
read.xlsx("./data/naturalGas.xlsx")
read.xlsx("./data/naturalGas.xlsx", sheetIndex =1, colIndex = colIndex, rowIndex = rowIndex)
?read.xlsx
cols <- 18:23
rows <- 7:15
cols <- 18:23
rows <- 7:15
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1,
colIndex = cols, rowIndex = rows)
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat <- read.xlsx("./data/naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "naturalGas.xlsx", method = "curl")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
cols <- 18:23
rows <- 7:15
dat <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "naturalGas.xlsx", method = "curl", mode="wb")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
cols <- 18:23
rows <- 7:15
dat <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
cols <- 19:23
rows <- 7:15
dat <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat
library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "naturalGas.xlsx", method = "curl", mode="wb")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
cols <- 19:23
rows <- 7:15
dat <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat
cols <- 19:22
rows <- 7:15
dat <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat
cols <- 19:22
rows <- 7:15
dat2 <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat2
cols <- 19:23
rows <- 7:15
dat2 <- read.xlsx("naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows)
dat2
?read.xlsx
library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data//naturalGas.xlsx", method = "curl", mode="wb")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
cols <- 18:23
rows <- 7:15
dat2 <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows, header=TRUE)
dat2
##Q3
library("xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx "
download.file (fileUrl, destfile = "./data//naturalGas.xlsx", method = "curl", mode="wb")
#gasData <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, header = TRUE)
rows <- 18:23
cols <- 7:15
dat2 <- read.xlsx("./data//naturalGas.xlsx", sheetIndex=1, colIndex = cols, rowIndex = rows, header=TRUE)
dat2
sum(dat2$Zip*dat2$Ext,na.rm=T)
library("xml")
install.packages("XML")
doc <- xmlTreeParse (fileURLXML, useInternal =TRUE)
fileURLXML <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library("xml")
library(xml)
library(XML)
?fread
?fread()
library(XML)
fileURLXML <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse (fileURLXML, useInternal =TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
?xmlTreeParse
library(XML)
fileURLXML <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse (fileURLXML, useInternal =TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
xpathSApply(rootNode, "//zipcode", 21231)
xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcodes == 21231
zipcodes[zipcodes == 21231]
length(zipcodes[zipcodes == 21231])
fileURL5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file (fileUrl5, destfile = "./data//communities.csv", method = "curl", mode="wb")
download.file (fileURL5, destfile = "./data//communities.csv", method = "curl", mode="wb")
library (data.table)
install.packages("data.table")
library(data.table)
?fread
DT <- fread("./data/communities.csv")
DT
DT[,mean(pwgtp15),by=SEX]
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
end.time <- Sys.time()
time.taken <- start.time - end.time
time.taken
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
time.taken <- start.time - Sys.time()
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
tictoc <- start.time - Sys.time()
tictoc
start.time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
tictoc <-  Sys.time() - start.time
tictoc
data <- read.csv("getdata-data-ss06hid.csv")
head (data)
start.time <- Sys.time()
DT[,mean(pwgtp15),by=SEX]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
tapply(DT$pwgtp15,DT$SEX,mean)
tictoc <-  Sys.time() - start.time
tictoc
sapply(split(DT$pwgtp15,DT$SEX),mean)
start.time <- Sys.time()
sapply(split(DT$pwgtp15,DT$SEX),mean)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
mean(DT$pwgtp15,by=DT$SEX)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
DT[,mean(pwgtp15),by=SEX]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
tapply(DT$pwgtp15,DT$SEX,mean)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
mean(DT$pwgtp15,by=DT$SEX)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tictoc <-  Sys.time() - start.time
tictoc
mean(DT$pwgtp15,by=DT$SEX)
DT
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
start.time <- Sys.time()
for (i in 1:1000)
DT[,mean(pwgtp15),by=SEX]
tictoc <-  Sys.time() - start.time
tictoc
DT[,mean(pwgtp15),by=SEX]
start.time <- Sys.time()
for (i in 1:1000)
tapply(DT$pwgtp15,DT$SEX,mean)
tictoc <-  Sys.time() - start.time
tictoc
tapply(DT$pwgtp15,DT$SEX,mean)
start.time <- Sys.time()
for (i in 1:1000)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tictoc <-  Sys.time() - start.time
tictoc
sapply(split(DT$pwgtp15,DT$SEX),mean)
start.time <- Sys.time()
for (i in 1:1000)
mean(DT$pwgtp15,by=DT$SEX)
tictoc <-  Sys.time() - start.time
tictoc
start.time <- Sys.time()
for (i in 1:1000)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tictoc <-  Sys.time() - start.time
tictoc
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
start.time <- Sys.time()
for (i in 1:1000)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tictoc <-  Sys.time() - start.time
tictoc
tables
tables()
DT[DT$pwgtp15,]
DT[DT$pwgtp15 = 1,]
DT[DT$pwgtp15 == 1,]
DT[DT$pwgtp15 >10 1,]
sapply(split(DT$pwgtp15,DT$SEX),mean)
start.time <- Sys.time()
for (i in 1:1000)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tictoc <-  Sys.time() - start.time
tictoc
split(DT$pwgtp15,DT$SEX)
tictoc <-  system.time( replicate( 1000, { sapply(split(DT$pwgtp15,DT$SEX),mean) } ) )- start.time
start.time <- Sys.time()
tictoc <-  system.time( replicate( 1000, { sapply(split(DT$pwgtp15,DT$SEX),mean) } ) )- start.time
tictoc
tictoc <-  system.time( replicate( 1000, { sapply(split(DT$pwgtp15,DT$SEX),mean) } ) )-Sys.time()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
install.packages("httr")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
